var documenterSearchIndex = {"docs":
[{"location":"#DynamicGrids.jl","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"DynamicGrids","category":"page"},{"location":"#DynamicGrids","page":"DynamicGrids.jl","title":"DynamicGrids","text":"DynamicGrids\n\n(Image: ) (Image: ) (Image: Build Status)  (Image: codecov.io)\n\nDynamicGrids is a generalised framework for building high-performance grid-based spatial models, including celluar automata, but also allowing arbitrary behviours such as long distance jumps and interactions between multiple grids. It is extended by Dispersal.jl for modelling organism dispersal processes.\n\n(Image: Dispersal quarantine)\n\nA dispersal simulation with quarantine interactions, using Dispersal.jl, custom rules and the  GtkOuput from DynamicGridsGtk.  Note that this is indicative of the real-time frame-rate on a laptop.\n\nA DynamicGrids.jl simulation is run with a script like this one running the included game of life model Life():\n\nusing DynamicGrids, Crayons\n\ninit = rand(Bool, 150, 200)\noutput = REPLOutput(init; tspan=1:200, fps=30, color=Crayon(foreground=:red, background=:black, bold=true))\nsim!(output, Life())\n\n(Image: REPL life)\n\nA game of life simulation being displayed directly in a terminal.\n\nConcepts\n\nThe framework is highly customisable, but there are some central ideas that define how a simulation works: rules and interactions, init arrays and outputs.\n\nRules\n\nRules hold the parameters for running a simulation. Each rule triggers a specific applyrule method that operates on each of the active cells in the grid. Rules come in a number of flavours (outlined in the  docs), which allow assumptions to be made about running them that can greatly improve performance. Rules are added to a Ruleset, with some additional parameters:\n\nruleset = Ruleset(Life(2, 3); opt=SparseOpt())\n\nMultiple models can be combined in a Ruleset. Each rule will be run for the whole grid, in sequence, using appropriate optimisations depending on the parent types of each rule:\n\nruleset = Ruleset(rule1, rule2; timestep=Day(1), opt=SparseOpt())\n\nFor better performance (often ~2x or more), models included in a Chain object will be combined into a single model, using only one array read and write. This optimisation is limited to CellRule, or a NeighborhoodRule followed by CellRule. If the @inline compiler macro is used on all applyrule methods, all rules in a Chain will be compiled together into a single,  efficient function call.\n\nruleset = Ruleset(rule1, Chain(rule2, rule3, rule4))\n\nA Ruleset can hold rules that act on multiple grids. These may either run side by side independently (say for live comparative analysis), or may interact.\n\nInit\n\ninit may be any AbstractArray or a NamedTuple of AbstractArray,  It contains whatever initialisation data is required to start the simulation.  The array type, size and element type of the init object determine the types used in the simulation, as well as providing the initial conditions:\n\ninit = rand(Float32, 100, 100)\n\nAn init array can be attached to a Ruleset: \n\nruleset = Ruleset(Life(); init=init)\n\nor passed into a simulation, where it will take preference over the Ruleset init:\n\nsim!(output, rulset; init=init)\n\nFor multiple grids, init is a NamedTuple of equal-sized arrays matching the names given to each Ruleset :\n\ninit = (predator=rand(100, 100), prey=(rand(100, 100))\n\nHandling and passing of the correct arrays is automated by DynamicGrids.jl. Rules must specify which grids they require in what order, using the first two (R and W) type parameters. \n\nDimensional or spatial init arrays from DimensionalData.jl of GeoData.jl will propagate through the model to return output with explicit dimensions. This will plot correctly as a map using Plots.jl, to which shape files and observation points can be easily added.\n\nOutput\n\nOutputs are ways of storing or viewing a simulation. They can be used interchangeably depending on your needs: ArrayOutput is a simple storage structure for high performance-simulations. As with most outputs, it is initialised with the init array, but in this case it also requires the number of simulation frames to preallocate before the simulation runs.\n\noutput = ArrayOutput(init; tspan=1:10)\n\nThe REPLOutput shown above is an inbuilt GraphicOutput that can be useful for checking a simulation when working in a terminal or over ssh:\n\noutput = REPLOutput(init; tspan=1:100)\n\nImageOutput is the most complex class of outputs, allowing full color visual simulations using COlorSchemes.jl. It can also display interactions using color  composites or layouts, as shown above in the quarantine simulation.\n\nDynamicGridsInteract.jl provides simulation interfaces for use in Juno, Jupyter, web pages or electron apps, with live interactive control over parameters. DynamicGridsGtk.jl is a simple graphical output for Gtk. These packages are kept separate to avoid dependencies when being used in non-graphical simulations. \n\nOutputs are also easy to write, and high performance or applications may benefit from writing a custom output to reduce memory use, such as running a loss function on the fly instead of storing the array. Performance of DynamicGrids.jl is dominated by cache interactions, and reducing memory use has significant positive effects. Custom  frame processors can also be written, which can help developing specialised visualisations.\n\nExample\n\nThis example implements a very simple forest fire model:\n\nusing DynamicGrids, DynamicGridsGtk, ColorSchemes, Colors\n\nconst DEAD, ALIVE, BURNING = 1, 2, 3\n\nrule = let prob_combustion=0.0001, prob_regrowth=0.01\n    Neighbors(RadialNeighborhood(1)) do neighborhood, cell\n        if cell == ALIVE\n            if BURNING in neighborhood\n                BURNING\n            else\n                rand() <= prob_combustion ? BURNING : ALIVE\n            end\n        elseif cell in BURNING\n            DEAD\n        else\n            rand() <= prob_regrowth ? ALIVE : DEAD\n        end\n    end\nend\n\n# Set up the init array and output (using a Gtk window)\ninit = fill(ALIVE, 400, 400)\nprocessor = ColorProcessor(scheme=ColorSchemes.rainbow, zerocolor=RGB24(0.0))\noutput = GtkOutput(init; tspan=1:200, fps=25, minval=DEAD, maxval=BURNING, processor=processor)\n\n# Run the simulation\nsim!(output, rule)\n\n# Save the output as a gif\nsavegif(\"forestfire.gif\", output)\n\n(Image: forestfire)\n\nTiming the simulation for 200 steps, the performance is quite good:\n\noutput = ArrayOutput(init; tspan=1:200)\n@time sim!(output, ruleset)\n 1.384755 seconds (640 allocations: 2.569 MiB)\n\n# To save a gif of the ArrayOutput we need to pass in a processor and the min and max\n# values used in the simulation:\n\nsavegif(\"forestfire.gif\", output; minval=DEAD, maxval=BURNING, processor=processor)\n\nAlternatives\n\nAgents.jl can also do cellular-automata style simulations. The design of Agents.jl is to iterate over a list of agents, instead of broadcasting over an array of cells. This approach is well suited to when you need to track the movement and details about individual agents throughout the simulation. \n\nHowever, for simple grid models where you don't need to track individuals, like the forest fire model above, DynamicGrids.jl is two orders of magnitude faster than Agents.jl, and provides better visualisation tools. If you are doing grid-based simulation and you don't need to track individual agents, DynamicGrids.jl is probably the best tool. For other use cases, try Agents.jl.\n\n\n\n\n\n","category":"module"},{"location":"#Rules","page":"DynamicGrids.jl","title":"Rules","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Rules define simulation behaviour. They hold data relevant to the simulation, and trigger dispatch of particular applyrule or applyrule! methods. Rules can be chained together arbitrarily to make composite simulations across any number of grids.","category":"page"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Ruleset\nRule\nChain\nCellRule\nCell\nNeighborhoodRule\nNeighbors\nLife\nManualRule\nManual\nManualNeighborhoodRule","category":"page"},{"location":"#DynamicGrids.Ruleset","page":"DynamicGrids.jl","title":"DynamicGrids.Ruleset","text":"Ruleset(rules...; overflow=RemoveOverflow(), opt=SparseOpt(), cellsize=1, timestep=nothing)\n\nA container for holding a sequence of Ruleand simulaiton details like overflow handing  and optimisation.  Rules will be run in the order they are passed, ie. Ruleset(rule1, rule2, rule3).\n\nKeyword Arguments\n\nopt: a PerformanceOpt to specificy optimisations like SparseOpt.\noverflow: what to do with overflow of grid edges. Options are RemoveOverflow() or WrapOverflow().\ncellsize: Size of cells.\ntimestep: fixed timestep where this is reuired for some rules. eg. Month(1) or 1u\"s\".\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Rule","page":"DynamicGrids.jl","title":"DynamicGrids.Rule","text":"abstract type Rule\n\nA rule contains all the information required to run a rule in a simulation, given an initial array. Rules can be chained together sequentially.\n\nBy default the output of the rule for a Rule is automatically written to the current cell in the grid.\n\nRules are applied to the grid using the applyrule method.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Chain","page":"DynamicGrids.jl","title":"DynamicGrids.Chain","text":"struct Chain{R, W, T<:Union{Tuple{}, Tuple{Union{#s32, #s31} where #s31<:CellRule where #s32<:NeighborhoodRule,Vararg{CellRule,N} where N}}} <: Rule{R,W}\n\nChains allow chaining rules together to be completed in a single processing step without intermediate reads or writes from grids. They are potentially compiled together into a single function call, especially if you use @inline on all applyrule. methods. Chain can hold either all CellRule or NeighborhoodRule followed by CellRule.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.CellRule","page":"DynamicGrids.jl","title":"DynamicGrids.CellRule","text":"abstract type CellRule <: Rule{R,W}\n\nA Rule that only writes and accesses a single cell: its return value is the new value of the cell(s). This limitation can be useful for performance optimisation, such as wrapping rules in Chain so that no writes occur between rules.\n\nAccessing source(data) and dest(data) arrays directly from CellRule is not guaranteed to have correct results, and should not be done.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Cell","page":"DynamicGrids.jl","title":"DynamicGrids.Cell","text":"Cell{R,W}(f)\nCell(f; read, write)\n\nA CellRule that applies a function f to the read grid cells and returns the write cells.\n\nEspecially convenient with do notation.\n\nExample\n\nSet the cells of grid :c to the sum of :a and :b.\n\nsimplerule = Cell() do a, b\n    a + b\nend\n\nIf you need to use multiple grids (a and b), use the read and write arguments. If you want to use external variables, wrap the whole thing in a let block, for performance.\n\nrule = let y = y\n    rule = Cell(read=(a, b), write=b) do a, b\n        a + b * y \n    end\nend\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.NeighborhoodRule","page":"DynamicGrids.jl","title":"DynamicGrids.NeighborhoodRule","text":"abstract type NeighborhoodRule <: Rule{R,W}\n\nA Rule that only accesses a neighborhood centered around the current cell. NeighborhoodRule is applied with the method:\n\napplyrule(data, rule, state, I)\n\nFor each cell a neighborhood buffer will be populated containing the neighborhood cells, and passed to applyrule in the rule neighborhood.\n\nThis allows memory optimisations and the use of BLAS routines on the neighborhood buffer for Moore. It also means that and no bounds checking is required in neighborhood code.\n\nneighbors(hood) returns an iterator over the buffer that is generic to any neigborhood type - Custom shapes as well as square radial neighborhoods. A Neighborhood can also be used directly as an iterator..\n\nFor neighborhood rules with multiple read grids, the first is the one used for the neighborhood, the others are passed in as additional state  for the central cell.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Neighbors","page":"DynamicGrids.jl","title":"DynamicGrids.Neighbors","text":"Neighbors(f, neighborhood)\nNeighbors{R,W}(f, neighborhood)\nNeighbors(f; read=:_default_, write=read, neighborhood=Moore())\n\nA NeighborhoodRule that receives a neighbors object for the first  read grid and the passed in neighborhood, followed by the cell values for  the reqquired grids, as with Cell.\n\nReturned value(s) are written to the write/W grid. \n\nAs with all NeighborhoodRule, you do not have to check bounds at  grid edges, that is handled for you internally.\n\nUsing SparseOpt may improve neighborhood performance  when zero values are common and can be safely ignored.\n\nExample\n\nrule = let x = 10\n    Neighbors{Tuple{:a,:b},:b}() do hood, a, b\n        data[:b][I...] = a + b^x\n    end\nend\n\nThe let block may improve performance.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Life","page":"DynamicGrids.jl","title":"DynamicGrids.Life","text":"Rule for game-of-life style cellular automata. This is a demonstration of  Cellular Automata more than a seriously optimised game of life rule.\n\nCells becomes active if it is empty and the number of neightbors is a number in the b array, and remains active the cell is active and the number of neightbors is in the s array.\n\nExamples (gleaned from CellularAutomata.jl)\n\n# Life. \nusing DynamicGrids, Distributions\ninit = Bool.(rand(Binomial(1, 0.5), 70, 70))\noutput = REPLOutput(init; tspan=(1, 1000), fps=10, color=:red)\n\n# Morley\nsim!(output, Ruleset(Life(b=[3,6,8], s=[2,4,5]))\n\n# 2x2\nsim!(output, Ruleset(Life(b=[3,6], s=[1,2,5])))\n\n# Dimoeba\ninit = rand(0:1, 400, 300)\ninit[:, 100:200] .= 0\noutput = REPLOutput{:braile}(init; fps=25, color=:blue)\nsim!(output, Life(b=(3,5,6,7,8), s=(5,6,7,8))))\n\n## No death\nsim!(output, Life(b=[3], s=[0,1,2,3,4,5,6,7,8]))\n\n## 34 life\nsim!(output, Life(b=[3,4], s=[3,4]))\n\n# Replicator\ninit = fill(1, 300,300)\ninit[:, 100:200] .= 0\ninit[10, :] .= 0\noutput = REPLOutput(init; tspan=(1, 1000), fps=60, color=:yellow)\nsim!(output, Life(b=(1,3,5,7), s=(1,3,5,7)))\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ManualRule","page":"DynamicGrids.jl","title":"DynamicGrids.ManualRule","text":"abstract type ManualRule <: Rule{R,W}\n\nManualRule is the supertype for rules that manually write to whichever cells of the  grid that they choose, instead of automatically updating every cell with their output.\n\nNeighborhoodRule is applied with the method:\n\napplyrule!(data, rule, state, I)\n\nNote the ! bang - this method alters the state of data.\n\nUpdates to the destination grids data are performed manually by data[:key][I...] += x, or data[I...] += x if no grid names are used. \n\nDirect assignments with = will produce bugs, as the same grid cell may  also be written to elsewhere.\n\nUpdating the block status of SparseOpt is handled automatically on write.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Manual","page":"DynamicGrids.jl","title":"DynamicGrids.Manual","text":"Manual(f; read=:_default_, write=read) \nManual{R,W}(f)\n\nA ManualRule to manually write to the array where you need to.  f is passed an indexable data object, and the index of the current cell,  followed by the requirement grid values for the index.\n\nExample\n\nrule = let x = 10\n    Manual{Tuple{:a,:b},:b}() do data, I, a, b\n        data[:b][I...] = a + b^x\n    end\nend\n\nThe let block greatly imroves performance.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ManualNeighborhoodRule","page":"DynamicGrids.jl","title":"DynamicGrids.ManualNeighborhoodRule","text":"abstract type ManualNeighborhoodRule <: ManualRule{R,W}\n\nA Rule that only writes to its neighborhood, defined by its radius distance from the current point.\n\nManualNeighborhood rules must return their radius with a radius() method, although by default this will be called on the result of neighborhood(rule).\n\nTODO: performance optimisations with a neighborhood buffer, simular to NeighborhoodRule but for writing.\n\n\n\n\n\n","category":"type"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"applyrule\napplyrule!","category":"page"},{"location":"#DynamicGrids.applyrule","page":"DynamicGrids.jl","title":"DynamicGrids.applyrule","text":"applyrule(rule::Rule, data, state, index, [buffer])\n\nUpdates cell values based on their current state and the  state of other cells as defined in the Rule.\n\nArguments:\n\nrule : Rule\ndata : SimData\nstate: the value(s) of the current cell\nindex: a (row, column) tuple of Int for the current cell coordinates - t: the current time step\nbuffer: a neighborhood burrer array passed to [NeighborhoodRule].\n\nReturns the values) to be written to the current cell(s).\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.applyrule!","page":"DynamicGrids.jl","title":"DynamicGrids.applyrule!","text":"applyrule!(rule::ManualRule, data, state, index)\n\nA rule that manually writes to the grid data array,  used in all rules inheriting from ManualRule.\n\nArguments:\n\nsee applyrule\n\n\n\n\n\n","category":"function"},{"location":"#Neighborhoods","page":"DynamicGrids.jl","title":"Neighborhoods","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Neighborhoods define a pattern of cells surrounding the current cell, and how they are combined to update the value of the current cell.","category":"page"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Neighborhood\nAbstractRadialNeighborhood\nMoore\nVonNeumann\nAbstractPositional\nPositional\nLayeredPositional","category":"page"},{"location":"#DynamicGrids.Neighborhood","page":"DynamicGrids.jl","title":"DynamicGrids.Neighborhood","text":"abstract type Neighborhood\n\nNeighborhoods define how surrounding cells are related to the current cell. The neighbors function returns the sum of surrounding cells, as defined by the neighborhood.\n\nNeighborhoods are iterable, so\n\nfor n in hood     if n > 3 end\n\nIf the allocation of neighborhood buffers during the simulation is costly (it usually isn't) you can use allocbuffers or preallocate them:\n\nMoore{3}(allocbuffers(3, init))\n\nYou can also change the length of the buffers tuple to experiment with cache performance.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.AbstractRadialNeighborhood","page":"DynamicGrids.jl","title":"DynamicGrids.AbstractRadialNeighborhood","text":"abstract type AbstractRadialNeighborhood <: Neighborhood{R,B}\n\nA Moore-style neighborhood where a square are with a center radius (D - 1) / 2 where D is the diameter.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Moore","page":"DynamicGrids.jl","title":"DynamicGrids.Moore","text":"struct Moore{R, B} <: AbstractRadialNeighborhood{R,B}\n\nMoore(radius::Int=1)\n\nRadial neighborhoods calculate the surrounding neighborhood from the radius around the central cell. The central cell is omitted.\n\nThe buffer argument may be required for performance optimisation, see Neighborhood for details.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.VonNeumann","page":"DynamicGrids.jl","title":"DynamicGrids.VonNeumann","text":"VonNeumann(radius=1)\n\nA convenience wrapper to build Von-Neumann neighborhoods as  a Positional neighborhood.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.AbstractPositional","page":"DynamicGrids.jl","title":"DynamicGrids.AbstractPositional","text":"abstract type AbstractPositional <: Neighborhood{R,B}\n\nPositional neighborhoods are tuples of custom coordinates (also tuples)  specified in relation to the central point of the current cell. They can  be any arbitrary shape or size, but should be listed in column-major order  for performance.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Positional","page":"DynamicGrids.jl","title":"DynamicGrids.Positional","text":"Positional(coord::Tuple{Vararg{Int}}...)\nPositional(coords::Tuple{Tuple{Vararg{Int}}}, [buffer=nothing])\nPositional{R}(coords::Tuple, buffer)\n\nAllows arbitrary neighborhood shapes by specifying each coord, which are simply Tuples of Int distance (positive and negative) from the central point.\n\nThe neighborhood radius is calculated from the most distance coordinate. For simplicity the buffer read from the main grid is a square with sides 2R + 1 around the central point, and is not shrunk or offset to match the coordinates if they are not symmetrical.\n\nThe buffer argument may be required for performance optimisation, see [Neighborhood] for more details.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.LayeredPositional","page":"DynamicGrids.jl","title":"DynamicGrids.LayeredPositional","text":"LayeredPositional(layers::Positional...)\n\nSets of Positional neighborhoods that can have separate rules for each set.\n\nneighbors for LayeredPositional returns a tuple of iterators for each neighborhood layer.\n\n\n\n\n\n","category":"type"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"neighbors\nsumneighbors\nmapsetneighbor!\nsetneighbor!","category":"page"},{"location":"#DynamicGrids.neighbors","page":"DynamicGrids.jl","title":"DynamicGrids.neighbors","text":"Returns an iteraterable generator over all cells in the neighborhood.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.sumneighbors","page":"DynamicGrids.jl","title":"DynamicGrids.sumneighbors","text":"sumneighbors(hood::Neighborhood, buffer, state)\n\nSums all cells in the neighborhood. This is identical to running  sum(neighbors(hood, buffer)) but it can be more efficient than as it may use matrix algra libraries for sum, instead of regular sum over  an iterator.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.mapsetneighbor!","page":"DynamicGrids.jl","title":"DynamicGrids.mapsetneighbor!","text":"mapsetneighbor!(data, hood, rule, state, index)\n\nRun setneighbor! over all cells in the neighborhood and sums its return values. \n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.setneighbor!","page":"DynamicGrids.jl","title":"DynamicGrids.setneighbor!","text":"Set value of a cell in the neighborhood. Called in mapsetneighbor.\n\n\n\n\n\n","category":"function"},{"location":"#Output","page":"DynamicGrids.jl","title":"Output","text":"","category":"section"},{"location":"#Output-Types-and-Constructors","page":"DynamicGrids.jl","title":"Output Types and Constructors","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Output\nArrayOutput\nGraphicOutput\nREPLOutput\nImageOutput\nGifOutput","category":"page"},{"location":"#DynamicGrids.Output","page":"DynamicGrids.jl","title":"DynamicGrids.Output","text":"abstract type Output <: AbstractArray{T,1}\n\nOutputs are store or display simulation results, usually as a vector of grids, one for each timestep - but they may also sum, combine or otherise manipulate the simulation grids to improve performance, reduce memory overheads or similar.\n\nSimulation outputs are decoupled from simulation behaviour, and in many cases can be used interchangeably.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ArrayOutput","page":"DynamicGrids.jl","title":"DynamicGrids.ArrayOutput","text":"mutable struct ArrayOutput{T, F<:AbstractArray{T,1}, E} <: Output{T}\n\nArrayOutput(init; tspan::AbstractRange)\n\nA simple output that stores each step of the simulation in a vector of arrays.\n\nArguments:\n\ninit: initialisation Array or NamedTuple of Array\n\nKeyword Argument:\n\ntspan: AbstractRange timespan for the simulation\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.GraphicOutput","page":"DynamicGrids.jl","title":"DynamicGrids.GraphicOutput","text":"abstract type GraphicOutput <: Output{T}\n\nOutputs that display the simulation frames live.\n\nAll GraphicOutputs have a GraphicConfig object  and provide a showframe method.\n\nSee REPLOutput for an example.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.REPLOutput","page":"DynamicGrids.jl","title":"DynamicGrids.REPLOutput","text":"mutable struct REPLOutput{T, F<:AbstractArray{T,1}, E, GC, Co, St, Cu} <: GraphicOutput{T}\n\nREPLOutput(init; tspan, fps=25.0, store=false, color=:white, cutoff=0.5 style=Block())\n\nAn output that is displayed directly in the REPL. It can either store or discard simulation frames.\n\nArguments:\n\ninit: initialisation Array or NamedTuple of arrays.\n\nKeyword Arguments:\n\ntspan: AbstractRange timespan for the simulation\nfps::Real: frames per second to display the simulation\nstore::Bool: whether ot store the simulation frames for later use\ncolor: a color from Crayons.jl\ncutoff::Real: the cutoff point to display a full or empty cell. Default is 0.5\nstyle::CharStyle: Block() or Braile() style printing. Braile uses 1/4 the screen space.\n\nREPLOutput(init)\n\nThe default option is :block.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ImageOutput","page":"DynamicGrids.jl","title":"DynamicGrids.ImageOutput","text":"abstract type ImageOutput <: GraphicOutput{T}\n\nGraphic outputs that display the simulation frames as RGB images.\n\nImageOutputs have a ImageConfig component, and define a showimage method.\n\nSee GifOutput for an example.\n\nAlthough the majority of the code is maintained here to enable sharing and reuse, most ImageOutputs are not provided in DynamicGrids.jl to avoid heavey dependencies on graphics libraries. See DynamicGridsGtk.jl and DynamicGridsInteract.jl for implementations.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.GifOutput","page":"DynamicGrids.jl","title":"DynamicGrids.GifOutput","text":"mutable struct GifOutput{T, F<:AbstractArray{T,1}, E, GC, IC, I, N} <: ImageOutput{T}\n\nGifOutput(init; filename, tspan, fps=25.0, store=false, \n          processor=ColorProcessor(), minval=nothing, maxval=nothing)\n\nOutput that stores the simulation as images and saves a Gif file on completion.\n\n\n\n\n\n","category":"type"},{"location":"#Grid-processors","page":"DynamicGrids.jl","title":"Grid processors","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"GridProcessor\nSingleGridProcessor\nSparseOptInspector\nColorProcessor\nMultiGridProcessor\nThreeColorProcessor\nLayoutProcessor\nGreyscale\nGrayscale\nTextConfig","category":"page"},{"location":"#DynamicGrids.GridProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.GridProcessor","text":"abstract type GridProcessor\n\nGrid processors convert a frame of the simulation into an RGB  image for display. Frames may be one or multiple grids.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.SingleGridProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.SingleGridProcessor","text":"abstract type SingleGridProcessor <: GridProcessor\n\nGrid processors that convert one grid to an image.\n\nThe first grid will be displayed if a SingleGridProcessor is used with a NamedTuple of grids.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.SparseOptInspector","page":"DynamicGrids.jl","title":"DynamicGrids.SparseOptInspector","text":"struct SparseOptInspector <: SingleGridProcessor\n\nSparseOptInspector()\n\nA GridProcessor that checks SparseOpt visually. Errors show in red. \n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ColorProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.ColorProcessor","text":"\"     ColorProcessor(; scheme=Greyscale(), zerocolor=nothing, maskcolor=nothing)\n\nConverts output grids to a colorsheme.\n\nArguments / Keyword Arguments\n\nscheme: a ColorSchemes.jl colorscheme, or Greyscale.\nzerocolor: a Color to use when values are zero, or nothing to ignore.\nmaskcolor: a Color to use when cells are masked, or nothing to ignore.\ntextconfig: a TextConfig object.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.MultiGridProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.MultiGridProcessor","text":"abstract type MultiGridProcessor <: GridProcessor\n\nProcessors that convert a frame containing multiple grids into a single image.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ThreeColorProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.ThreeColorProcessor","text":"ThreeColorProcessor(; colors=(Red(), Green(), Blue()), zerocolor=nothing, maskcolor=nothing)\n\nAssigns Red(), Blue(), Green() or nothing to any number of dynamic grids in any order. Duplicate colors will be summed. The final color sums are combined into a composite color image for display.\n\nArguments / Keyword Arguments\n\ncolors: a tuple or Red(), Green(), Blue(), or nothing matching the number of grids.\nzerocolor: an RGB color to use when values are zero, or nothing to ignore.\nmaskcolor: an RGB color to use when cells are masked, or nothing to ignore.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.LayoutProcessor","page":"DynamicGrids.jl","title":"DynamicGrids.LayoutProcessor","text":"LayoutProcessor(layout::Array, processors, textconfig)\n\nLayoutProcessor allows displaying multiple grids in a block layout, by specifying a layout matrix and a list of SingleGridProcessor  to be run for each.\n\nArguments\n\nlayout: A Vector or Matrix containing the keys or numbers of grids in the locations to display them. nothing, missing or 0 values will be skipped.\nprocessors: tuple of SingleGridProcessor, one for each grid in the simulation. Can be nothing or any other value for grids not in layout.\ntextconfig : [TextConfig] object for printing time and grid name labels.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Greyscale","page":"DynamicGrids.jl","title":"DynamicGrids.Greyscale","text":"struct Greyscale{M1, M2}\n\nDefault colorscheme. Better performance than using a Colorschemes.jl scheme as there is no interpolation.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.Grayscale","page":"DynamicGrids.jl","title":"DynamicGrids.Grayscale","text":"Alternate name for Greyscale()\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.TextConfig","page":"DynamicGrids.jl","title":"DynamicGrids.TextConfig","text":"struct TextConfig{F, NPi, NPo, TPi, TPo, FC, BC}\n\nTextConfig(; font::String, namepixels=14, timepixels=14,\n           namepos=(timepixels+namepixels, timepixels),\n           timepos=(timepixels, timepixels),\n           fcolor=ARGB32(1.0), bcolor=ARGB32(RGB(0.0), 1.0),)\nTextConfig(face, namepixels, namepos, timepixels, timepos, fcolor, bcolor)\n\nText configuration for printing timestep and grid name on the image.\n\nArguments\n\nnamepixels and timepixels: set the pixel size of the font. \ntimepos and namepos: tuples that set the label positions, in pixels.\nfcolor and bcolor: the foreground and background colors, as ARGB32.\n\n\n\n\n\n","category":"type"},{"location":"#Gifs","page":"DynamicGrids.jl","title":"Gifs","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"savegif","category":"page"},{"location":"#DynamicGrids.savegif","page":"DynamicGrids.jl","title":"DynamicGrids.savegif","text":"savegif(filename::String, o::Output, data; processor=processor(o), fps=fps(o), [kwargs...])\n\nWrite the output array to a gif. You must pass a processor keyword argument for any Output objects not in ImageOutput (which allready have a processor attached).\n\nSaving very large gifs may trigger a bug in Imagemagick.\n\n\n\n\n\n","category":"function"},{"location":"#Internal-components-for-outputs","page":"DynamicGrids.jl","title":"Internal components for outputs","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"DynamicGrids.Extent\nDynamicGrids.GraphicConfig\nDynamicGrids.ImageConfig","category":"page"},{"location":"#DynamicGrids.Extent","page":"DynamicGrids.jl","title":"DynamicGrids.Extent","text":"mutable struct Extent{I, M, A}\n\nExtent(init, mask, aux, tspan, tstopped)\nExtent(; init, mask=nothing, aux=nothing, tspan, kwargs...)\n\nContainer for extensive variables: spatial and timeseries data. These are kept separate from rules to allow application of rules to alternate spatial and temporal contexts.\n\nExtent is not usually constructed directly by users, but it can be passed to Output constructors instead of init, mask, aux and tspan.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.GraphicConfig","page":"DynamicGrids.jl","title":"DynamicGrids.GraphicConfig","text":"mutable struct GraphicConfig{FPS, TS}\n\nGraphicConfig(; fps=25.0, store=false, kwargs...) =\nGraphicConfig(fps, timestamp, stampframe, store)\n\nConfig and variables for graphic outputs.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ImageConfig","page":"DynamicGrids.jl","title":"DynamicGrids.ImageConfig","text":"struct ImageConfig{P, Min, Max}\n\nImageConfig(processor, minval, maxval) \nImageConfig(; processor=ColorProcessor(), minval=nothing, maxval=nothing)\n\nCommon configuration component for all ImageOutput.\n\nHolds a GridProcessor.  minval and maxval fields normalise grid values between zero and one,  for use with Colorshemes.jl. nothing values are considered to represent  zero and one, and will not be normalised.\n\nValues \n\n\n\n\n\n","category":"type"},{"location":"#Ruleset-config","page":"DynamicGrids.jl","title":"Ruleset config","text":"","category":"section"},{"location":"#Overflow","page":"DynamicGrids.jl","title":"Overflow","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Overflow\nWrapOverflow\nRemoveOverflow","category":"page"},{"location":"#DynamicGrids.Overflow","page":"DynamicGrids.jl","title":"DynamicGrids.Overflow","text":"abstract type Overflow\n\nSingleton types for choosing the grid overflow rule used in inbounds. These determine what is done when a neighborhood or jump extends outside of the grid.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.WrapOverflow","page":"DynamicGrids.jl","title":"DynamicGrids.WrapOverflow","text":"struct WrapOverflow <: Overflow\n\nWrap cords that overflow boundaries back to the opposite side\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.RemoveOverflow","page":"DynamicGrids.jl","title":"DynamicGrids.RemoveOverflow","text":"struct RemoveOverflow <: Overflow\n\nRemove coords that overflow boundaries\n\n\n\n\n\n","category":"type"},{"location":"#Optimisation","page":"DynamicGrids.jl","title":"Optimisation","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"PerformanceOpt\nNoOpt\nSparseOpt","category":"page"},{"location":"#DynamicGrids.PerformanceOpt","page":"DynamicGrids.jl","title":"DynamicGrids.PerformanceOpt","text":"abstract type PerformanceOpt\n\nPerformance optimisations to use in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.NoOpt","page":"DynamicGrids.jl","title":"DynamicGrids.NoOpt","text":"struct NoOpt <: PerformanceOpt\n\nRun the simulation without performance optimisations besides basic high performance programming.\n\nThis is still very fast, but not intelligent about the work that it does.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.SparseOpt","page":"DynamicGrids.jl","title":"DynamicGrids.SparseOpt","text":"struct SparseOpt <: PerformanceOpt\n\nAn optimisation that ignores all zero values in the grid.\n\nFor low-density simulations performance may improve by orders of magnitude, as only used cells are run.\n\nThis is complicated for optimising neighborhoods - they must run if they contain just one non-zero cell.\n\n\n\n\n\n","category":"type"},{"location":"#Internal-data-handling","page":"DynamicGrids.jl","title":"Internal data handling","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Simdata and Griddata objects are used to manage the simulation and provide rules with any data they need.","category":"page"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"SimData\nGridData\nReadableGridData\nWritableGridData","category":"page"},{"location":"#DynamicGrids.SimData","page":"DynamicGrids.jl","title":"DynamicGrids.SimData","text":"struct SimData{G<:NamedTuple, E, Ru, F} <: AbstractSimData\n\nSimulation data hold all intermediate arrays, timesteps and frame numbers for the current frame of the siulation.\n\nA simdata object is accessable in applyrule as the second parameter.\n\nMultiple grids can be indexed into using their key. Single grids can be indexed as if SimData is regular array.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.GridData","page":"DynamicGrids.jl","title":"DynamicGrids.GridData","text":"abstract type GridData <: AbstractArray{T,N}\n\nSimulation data specific to a singule grid.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.ReadableGridData","page":"DynamicGrids.jl","title":"DynamicGrids.ReadableGridData","text":"Simulation data and storage passed to rules for each timestep.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGrids.WritableGridData","page":"DynamicGrids.jl","title":"DynamicGrids.WritableGridData","text":"WriteableGridData is passed to rules <: ManualRule, and can be written to directly as an array. This handles updates to block optimisations and writing to the correct source/dest array.\n\n\n\n\n\n","category":"type"},{"location":"#Methods","page":"DynamicGrids.jl","title":"Methods","text":"","category":"section"},{"location":"","page":"DynamicGrids.jl","title":"DynamicGrids.jl","text":"Modules = [DynamicGrids]\nOrder   = [:function]","category":"page"},{"location":"#DynamicGrids.VonNeumann-2","page":"DynamicGrids.jl","title":"DynamicGrids.VonNeumann","text":"VonNeumann(radius=1)\n\nA convenience wrapper to build Von-Neumann neighborhoods as  a Positional neighborhood.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.allocbuffers-Tuple{AbstractArray,Neighborhood}","page":"DynamicGrids.jl","title":"DynamicGrids.allocbuffers","text":"allocbuffers(init::AbstractArray, hood::Neighborhood)\nallocbuffers(init::AbstractArray, radius::Int)\n\nAllocate buffers for the Neighborhood. The init array should  be of the same type as the grid the neighborhood runs on.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.applyrule-Tuple{SimData,Chain,Any,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.applyrule","text":"applyrule(data, rules::Chain, state, (i, j))\n\nChained rules. If a Chain of rules is passed to applyrule, run them sequentially for each cell. This can have much beter performance as no writes occur between rules, and they are essentially compiled together into compound rules. This gives correct results only for CellRule, or for a single NeighborhoodRule followed by CellRule.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.applyrule-Tuple{SimData,Life,Any,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.applyrule","text":"applyrule(data::SimData, rule::Life, state, I)\n\nApplies game of life rule to current cell, returning Bool.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.combinebands-Tuple{Any,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.combinebands","text":"combinebands(c::Tuple{Vararg{<:BandColor}, acc, xs)\n\nAssign values to color bands given in any order, and output as RGB.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.delay-Tuple{Output,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.delay","text":"delay(o::Output, f)\n\nGraphic outputs delay the simulations to match some fps rate, but other outputs just do nothing and continue.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.finalise-Tuple{Output}","page":"DynamicGrids.jl","title":"DynamicGrids.finalise","text":"finalise(o::Output)\n\nFinalise the output display, if it has one.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.grid2image","page":"DynamicGrids.jl","title":"DynamicGrids.grid2image","text":"grid2image(o::ImageOutput, data::Union{Ruleset,SimData}, grids, t)\ngrid2image(p::GridProcessor, o::ImageOutput, data::Union{Ruleset,SimData}, grids, t)\n\nConvert a grid or named tuple of grids to an RGB image, using a GridProcessor\n\nGridProcessor is intentionally not dispatched with the output type in the methods that finally generate images, to reduce coupling. But it they can be distpatched on together when required for custom outputs.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.hoodsize-Tuple{Neighborhood}","page":"DynamicGrids.jl","title":"DynamicGrids.hoodsize","text":"hoodsize(radius)\n\nGet the size of a neighborhood dimension from its radius, which is always 2r + 1.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.inbounds-Tuple{Tuple,SimData}","page":"DynamicGrids.jl","title":"DynamicGrids.inbounds","text":"inbounds(x, max, overflow)\n\nCheck grid boundaries for a single coordinate and max value or a tuple of coorinates and max values.\n\nReturns a tuple containing the coordinate(s) followed by a boolean true if the cell is in bounds, false if not.\n\nOverflow of type RemoveOverflow returns the coordinate and false to skip coordinates that overflow outside of the grid. WrapOverflow returns a tuple with the current position or it's wrapped equivalent, and true as it is allways in-bounds.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.initialise-Tuple{Output}","page":"DynamicGrids.jl","title":"DynamicGrids.initialise","text":"initialise(o::Output)\n\nInitialise the output display, if it has one.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.isasync-Tuple{Output}","page":"DynamicGrids.jl","title":"DynamicGrids.isasync","text":"isasync(o::Output)\n\nCheck if the output should run asynchonously.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.isinferred-Tuple{Output,Vararg{Rule,N} where N}","page":"DynamicGrids.jl","title":"DynamicGrids.isinferred","text":"isinferred(output::Output, ruleset::Ruleset)\n\nTest if a custom rule return type is inferred and correct. Type-stability can give orders of magnitude improvements in performance.\n\nIf there is no init array or NamedTuple in the ruleset it must be passed in as a keyword argument.\n\nPassing starttime is optional, in case the time type has some effect on the rule.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.ismasked-Tuple{AbstractSimData,Vararg{Any,N} where N}","page":"DynamicGrids.jl","title":"DynamicGrids.ismasked","text":"Check if a cell is masked, using the passed-in mask grid.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.isshowable-Tuple{Output,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.isshowable","text":"isshowable(o::Output)\n\nCheck if the output can be shown visually.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.isstored-Tuple{Output}","page":"DynamicGrids.jl","title":"DynamicGrids.isstored","text":"isasync(o::Output)\n\nCheck if the output is storing each frame, or just the the current one.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.method-Tuple{Union{Cell, Manual, Neighbors}}","page":"DynamicGrids.jl","title":"DynamicGrids.method","text":"method(rule)\n\nGet the method of a Cell, Neighbors, or Manual rule.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.neighbors-Tuple{AbstractRadialNeighborhood}","page":"DynamicGrids.jl","title":"DynamicGrids.neighbors","text":"neighbors(hood::AbstractRadialNeighborhood, buffer)\n\nReturns a generator of the cell neighbors, skipping the central cell.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.neighbors-Tuple{LayeredPositional}","page":"DynamicGrids.jl","title":"DynamicGrids.neighbors","text":"neighbors(hood::Positional)\n\nReturns a tuple of iterators over each Positional neighborhood  layer for the cells around the current index.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.neighbors-Tuple{Positional}","page":"DynamicGrids.jl","title":"DynamicGrids.neighbors","text":"neighbors(hood::Positional)\n\nReturns an iterator over the Positional neighborhood  cells around the current index.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.normalise-Tuple{Any,Number,Number}","page":"DynamicGrids.jl","title":"DynamicGrids.normalise","text":"normalise(x, min, max)\n\nSet a value to be between zero and one, before converting to Color. min and max of nothing are assumed to be 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.precalcrules","page":"DynamicGrids.jl","title":"DynamicGrids.precalcrules","text":"precalcrules(rule, data)\n\nRun any precalculations needed to run a rule for a particular frame, returning new rule objects containing the updates.\n\nThis is a functional approach, rebuilding rules recursively. @set from Setfield.jl can help updating immutable rules.\n\nThe default action is to return the existing rule without change.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.radius","page":"DynamicGrids.jl","title":"DynamicGrids.radius","text":"radius(rule, [key])\n\nReturn the radius of a rule or ruleset if it has one, otherwise zero.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.radius-Tuple{Ruleset}","page":"DynamicGrids.jl","title":"DynamicGrids.radius","text":"Find the largest radius present in the passed in rules.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.resume!","page":"DynamicGrids.jl","title":"DynamicGrids.resume!","text":"resume!(output::GraphicOutput, ruleset::Ruleset;\n        tstop=last(tspan(output)),\n        fps=fps(output),\n        simdata=nothing,\n        nreplicates=nothing)\n\nRestart the simulation from where you stopped last time. For arguments see sim!. The keyword arg tstop can be used to extend the length of the simulation.\n\nArguments\n\noutput: An Output to store grids or display them on the screen.\nruleset: A Ruleset containing one ore more Rules. These will each be run in sequence.\n\nKeyword Arguments (optional\n\ninit: an optional initialisation array\ntstop: the new stop time for the simulation. Taken from the output length by default.\nfps: the frames per second to display. Taken from the output by default.\nnreplicates: the number of replicates to combine in stochastic simulations\nsimdata: a SimData object. Keeping it between simulations can improve performance when that is important\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.rgb-Tuple{Any,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.rgb","text":"rgb(scheme, val)\n\nConvert a color scheme and value to an RGB value.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.rgb-Tuple{Tuple}","page":"DynamicGrids.jl","title":"DynamicGrids.rgb","text":"rgb(val)\n\nConvert a number, tuple or color to an ARGB32 value.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.savegif-2","page":"DynamicGrids.jl","title":"DynamicGrids.savegif","text":"savegif(filename::String, o::Output, data; processor=processor(o), fps=fps(o), [kwargs...])\n\nWrite the output array to a gif. You must pass a processor keyword argument for any Output objects not in ImageOutput (which allready have a processor attached).\n\nSaving very large gifs may trigger a bug in Imagemagick.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.scale-Tuple{Any,Any,Any}","page":"DynamicGrids.jl","title":"DynamicGrids.scale","text":"scale(x, min, max)\n\nRescale a value between 0 and 1 to be between min and max. This can be used to shrink the range of a colorsheme that is displayed. min and max of nothing are assumed to be 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.showframe-Tuple{Output,Vararg{Any,N} where N}","page":"DynamicGrids.jl","title":"DynamicGrids.showframe","text":"showframe(o::Output, args...)\n\nShow the grid(s) in the output, if it can do that.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicGrids.showimage","page":"DynamicGrids.jl","title":"DynamicGrids.showimage","text":"showimage(image::AbstractArray{AGRB32,2}, output, f, t)\n\nShow image generated by and GridProcessor in an ImageOutput.\n\nArguments\n\n`image\noutput: the output to define the method for\nf: the current frame number\nt: the current frame date/time\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.sim!","page":"DynamicGrids.jl","title":"DynamicGrids.sim!","text":"sim!(output, [ruleset=ruleset(output)];\n     init=init(output),\n     mask=mask(output),\n     tstpan=tspan(output),\n     aux=aux(output),\n     fps=fps(output),\n     simdata=nothing,\n     nreplicates=nothing)\n\nRuns the whole simulation, passing the destination aray to the passed in output for each time-step.\n\nArguments\n\noutput: An Output to store grids or display them on the screen.\nruleset: A Ruleset containing one ore more Rules. If the output has a Ruleset attached, it will be used.\n\nKeyword Arguments\n\nTheses are the taken from the output argument by default.\n\ninit: optional array or NamedTuple of arrays.\nmask: a Bool array matching the init array size. false cells do not run.\naux: a NamedTuple of auxilary data to be used by rules.\ntspan: a tuple holding the start and end of the timespan the simulaiton will run for.\nfps: the frames per second to display. Will be taken from the output if not passed in.\nnreplicates: the number of replicates to combine in stochastic simulations\nsimdata: a SimData object. Keeping it between simulations can reduce memory allocation when that is important.\n\n\n\n\n\n","category":"function"},{"location":"#DynamicGrids.sim!-Tuple{Output,Vararg{Rule,N} where N}","page":"DynamicGrids.jl","title":"DynamicGrids.sim!","text":"sim!(output, rules...; kwargs...)\n\nShorthand for running a rule without defining a Ruleset.\n\n\n\n\n\n","category":"method"}]
}
