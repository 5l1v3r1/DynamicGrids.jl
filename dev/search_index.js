var documenterSearchIndex = {"docs":
[{"location":"#CellularAutomataBase.jl-1","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"CellularAutomataBase","category":"page"},{"location":"#CellularAutomataBase","page":"CellularAutomataBase.jl","title":"CellularAutomataBase","text":"CellularAutomataBase provides a framework for building grid-based simulations.\n\nThe framework is highly customisable, but there are some central ideas that define how a simulation works: rules, init arrays and outputs.\n\nRules hold the configuration for a simulation, and trigger a specific applyrule method that operates on each of the cells in the grid. See AbstractRule and applyrule. Rules come in a number of flavours, which allows assumptions to be made about running them that can greatly improve performance. Rules are chained together in a Ruleset object.\n\nThe init array may be any AbstractArray, containing whatever initialisation data is required to start the simulation. The Array type and element type of the init array determine the types used in the simulation, as well as providing the initial conditions.\n\nOutputs are ways of storing of viewing a simulation, and can be used interchangeably depending on your needs. See AbstractOutput.\n\nA typical simulation is run with a script like:\n\ninit = my_array\nrules = Ruleset(Life())\noutput = ArrayOutput(init)\n\nsim!(output, rules; init=init)\n\nMultiple models can be passed to sim! in a Ruleset. Each rule will be run for the whole grid, in sequence.\n\nsim!(output, Ruleset(rule1, rule2); init=init)\n\nFor better performance, models included in a tuple will be combined into a single model (with only one array write). This is limited to AbstractCellRule, although AbstractNeighborhoodRule may be used as the first model in the tuple.\n\nsim!(output, Rules(rule1, (rule2, rule3)); init=init)\n\n\n\n\n\n","category":"module"},{"location":"#Examples-1","page":"CellularAutomataBase.jl","title":"Examples","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"While this package isn't designed or optimised specifically to run the game of life, it's a simple example of what this package can do. This example runs a game of life and displays it in a REPLOutput.","category":"page"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"using CellularAutomataBase\n\n# Build a random starting grid\ninit = round.(Int8, max.(0.0, rand(-2.0:0.1:1.0, 70,70)))\n\n# Use the default game of life model\nmodel = Ruleset(Life())\n\n# Use an output that shows the cellular automata as blocks in the REPL\noutput = REPLOutput{:block}(init; fps=100)\n\nsim!(output, model, init; tstop=5)","category":"page"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"More life-like examples:","category":"page"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"# Morley\nsim!(output, Ruleset(Life(b=[3,6,8], s=[2,4,5]); init=init))\n\n# 2x2\nsim!(output, Ruleset(Life(b=[3,6], s=[1,2,5]); init=init))\n\n# Dimoeba\ninit1 = round.(Int8, max.(0.0, rand(70,70)))\nsim!(output, Ruleset(Life(b=[3,5,6,7,8], s=[5,6,7,8]); init=init1))\n\n## No death\nsim!(output, Ruleset(Life(b=[3], s=[0,1,2,3,4,5,6,7,8]); init))\n\n## 34 life\nsim!(output, Ruleset(Life(b=[3,4], s=[3,4])); init=init, fps=10)\n\n# Replicator\ninit2 = round.(Int8, max.(0.0, rand(70,70)))\ninit2[:, 1:30] .= 0\ninit2[21:50, :] .= 0\nsim!(output, Ruleset(Life(b=[1,3,5,7], s=[1,3,5,7])); init=init2)","category":"page"},{"location":"#Rules-1","page":"CellularAutomataBase.jl","title":"Rules","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"Rules define simulation behaviour. They hold data relevant to the simulation, and trigger dispatch of particular applyrule or applyrule! methods. Rules can be chained together arbitrarily to make composite simulations.","category":"page"},{"location":"#Types-and-Constructors-1","page":"CellularAutomataBase.jl","title":"Types and Constructors","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"AbstractRule\nAbstractCellRule\nAbstractNeighborhoodRule\nAbstractPartialRule\nAbstractPartialNeighborhoodRule\nLife","category":"page"},{"location":"#CellularAutomataBase.AbstractRule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractRule","text":"abstract type AbstractRule\n\nA rule contains all the information required to run a rule in a cellular simulation, given an initial array. Rules can be chained together sequentially.\n\nThe output of the rule for an AbstractRule is allways written to the current cell in the grid.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.AbstractCellRule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractCellRule","text":"abstract type AbstractCellRule <: AbstractRule\n\nA Rule that only writes and accesses a single cell: its return value is the new value of the cell. This limitation can be useful for performance optimisations.\n\nAccessing the data.source and data.dest arrays directly is not guaranteed to have correct results, and should not be done.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.AbstractNeighborhoodRule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractNeighborhoodRule","text":"abstract type AbstractNeighborhoodRule <: AbstractRule\n\nA Rule That only accesses a neighborhood, defined by its radius distance from the current cell.\n\nFor each cell a buffer will be populated containing the neighborhood cells, accessible with buffer(data). This allows memory optimisations and the use of BLAS routines on the neighborhood.  It also means that and no bounds checking is required.\n\nAbstractNeighborhoodRule must read only from the state variable and the  neighborhood_buffer array, and never manually write to the dest(data) array.  Its return value is allways written to the central cell.\n\nCustom Neighborhood rules must return their radius with a radius() method.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.AbstractPartialRule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractPartialRule","text":"abstract type AbstractPartialRule <: AbstractRule\n\nAbstractPartialRule is for rules that manually write to whichever cells of the grid that they choose, instead of updating every cell with their output.\n\nUpdates to the destination array (dest(data)) must be performed manually, while the source array can be accessed with source(data).\n\nThe dest array is copied from the source prior to running the applyrule! method.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.AbstractPartialNeighborhoodRule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractPartialNeighborhoodRule","text":"abstract type AbstractPartialNeighborhoodRule <: AbstractPartialRule\n\nA Rule that only writes to its neighborhood, defined by its radius distance from the current point. TODO: should this exist?\n\nCustom PartialNeighborhood rules must return their radius with a radius() method.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.Life","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.Life","text":"Rule for game-of-life style cellular automata. \n\nField Description Default Limits\nneighborhood Any AbstractNeighborhood RadialNeighborhood{1}() nothing\nb Array, Tuple or Iterable of integers to match neighbors when cell is empty (3, 3) (0, 8)\ns Array, Tuple or Iterable of integers to match neighbors cell is full (2, 3) (0, 8)\n\n\n\n\n\n","category":"type"},{"location":"#Neighborhoods-1","page":"CellularAutomataBase.jl","title":"Neighborhoods","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"Neighborhoods define a pattern of cells surrounding the current cell,  and how they are combined to update the value of the current cell.","category":"page"},{"location":"#Types-and-Constructors-2","page":"CellularAutomataBase.jl","title":"Types and Constructors","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"AbstractNeighborhood\nRadialNeighborhood\nAbstractCustomNeighborhood\nCustomNeighborhood\nLayeredCustomNeighborhood","category":"page"},{"location":"#CellularAutomataBase.AbstractNeighborhood","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractNeighborhood","text":"abstract type AbstractNeighborhood\n\nNeighborhoods define how surrounding cells are related to the current cell. The neighbors function returns the sum of surrounding cells, as defined by the neighborhood.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.RadialNeighborhood","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.RadialNeighborhood","text":"struct RadialNeighborhood{R} <: AbstractNeighborhood{R}\n\nRadial neighborhoods calculate the surrounding neighborood from the radius around the central cell. The central cell is ommitted.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.AbstractCustomNeighborhood","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractCustomNeighborhood","text":"abstract type AbstractCustomNeighborhood <: AbstractNeighborhood{R}\n\nCustom neighborhoods are tuples of custom coordinates in relation to the central point of the current cell. They can be any arbitrary shape or size.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.CustomNeighborhood","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.CustomNeighborhood","text":"Allows completely arbitrary neighborhood shapes by specifying each coordinate specifically.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.LayeredCustomNeighborhood","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.LayeredCustomNeighborhood","text":"Sets of custom neighborhoods that can have separate rules for each set.\n\n\n\n\n\n","category":"type"},{"location":"#Output-1","page":"CellularAutomataBase.jl","title":"Output","text":"","category":"section"},{"location":"#Output-Types-and-Constructors-1","page":"CellularAutomataBase.jl","title":"Output Types and Constructors","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"AbstractOutput\nArrayOutput\nREPLOutput","category":"page"},{"location":"#CellularAutomataBase.AbstractOutput","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractOutput","text":"abstract type AbstractOutput <: AbstractArray{T,1}\n\nAll outputs must inherit from AbstractOutput.\n\nSimulation outputs are decoupled from simulation behaviour and in many cases can be used interchangeably.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.ArrayOutput","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.ArrayOutput","text":"A simple output that stores each step of the simulation in a vector of arrays.\n\nArguments:\n\nframes: Single init array or vector of arrays\ntstop: The length of the output.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.REPLOutput","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.REPLOutput","text":"An output that is displayed directly in the REPL. It can either store or discard simulation frames.\n\nArguments:\n\nframes: Single init array or vector of arrays\n\nKeyword Arguments:\n\nfps::Real: frames per second to run at\nshowfps::Real: maximum displayed frames per second\nstore::Bool: store frames or not\ncolor: a color from Crayons.jl\ncutoff::Real: the cutoff point to display a full or empty cell. Default is 0.5\n\nTo choose the display type can pass :braile or :block to the constructor:\n\nREPLOutput{:block}(init)\n\nThe default option is :block.\n\n\n\n\n\n","category":"type"},{"location":"#Frame-processors-1","page":"CellularAutomataBase.jl","title":"Frame processors","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"AbstractFrameProcessor\nGreyscaleProcessor\nGreyscaleZerosProcessor\nColorSchemeProcessor\nColorSchemeZerosProcessor","category":"page"},{"location":"#CellularAutomataBase.AbstractFrameProcessor","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.AbstractFrameProcessor","text":"abstract type AbstractFrameProcessor\n\nFrame processors convert frame data into RGB24 images They can be passed as procesor keyword argument to outputs that have an image display.\n\nTo add new processor, define a type that inherits from AbstractFrameProcessor and a frametoimage method:\n\nframetoimage(p::YourProcessor, output, frame, t) = some_rbg_image\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.GreyscaleProcessor","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.GreyscaleProcessor","text":"struct GreyscaleProcessor <: AbstractFrameProcessor\n\nConverts output frames to a greyscale images\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.GreyscaleZerosProcessor","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.GreyscaleZerosProcessor","text":"struct GreyscaleZerosProcessor{C} <: AbstractFrameProcessor\n\n\" Converts output frames to a greyscale image with the chosen color for zeros. Usefull for separating low values from actual zeros\n\nArguments\n\nzerocolor: RGB24 or a value that will be converted to RGB24 by the RGB24() constructor.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.ColorSchemeProcessor","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.ColorSchemeProcessor","text":"struct ColorSchemeProcessor{S} <: AbstractFrameProcessor\n\n\" Converts output frames to a colorsheme.\n\nArguments\n\nscheme: a ColorSchemes.jl colorscheme.\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.ColorSchemeZerosProcessor","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.ColorSchemeZerosProcessor","text":"struct ColorSchemeZerosProcessor{S, C} <: AbstractFrameProcessor\n\n\" Converts frame to a colorshceme image with the chosen color for zeros. Usefull for separating low values from actual zeros\n\nArguments\n\nscheme: a ColorSchemes.jl colorscheme. zerocolor: RGB24 or a value that will be converted to RGB24 by the RGB24() constructor.\n\n\n\n\n\n","category":"type"},{"location":"#Overflow-1","page":"CellularAutomataBase.jl","title":"Overflow","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"AbstractOverflow\nWrapOverflow\nRemoveOverflow","category":"page"},{"location":"#CellularAutomataBase.WrapOverflow","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.WrapOverflow","text":"struct WrapOverflow <: CellularAutomataBase.AbstractOverflow\n\nWrap cords that overflow boundaries back to the opposite side\n\n\n\n\n\n","category":"type"},{"location":"#CellularAutomataBase.RemoveOverflow","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.RemoveOverflow","text":"struct RemoveOverflow <: CellularAutomataBase.AbstractOverflow\n\nRemove coords that overflow boundaries\n\n\n\n\n\n","category":"type"},{"location":"#Methods-1","page":"CellularAutomataBase.jl","title":"Methods","text":"","category":"section"},{"location":"#","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.jl","text":"Modules = [CellularAutomataBase]\nOrder   = [:function]","category":"page"},{"location":"#CellularAutomataBase.replay-Tuple{AbstractOutput,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.replay","text":"replay(output::AbstractOutput)\n\nShow a stored simulation again. You can also use this to show a simulation in different output type.\n\nIf you ran a simulation with store=false there won't be much to replay.\n\nExample\n\nreplay(REPLOutput(output))\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.resume!-Tuple{Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.resume!","text":"resume!(output, ruleset; tstop=100)\n\nRestart the simulation where you stopped last time.\n\nArguments\n\nSee sim!.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.ruletypes-Tuple{Ruleset}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.ruletypes","text":"Return a tuple of the base types of the rules in the ruleset\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.savegif-Tuple{String,AbstractOutput}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.savegif","text":"savegif(filename::String, output::AbstractOutput)\n\nWrite the output array to a gif. Saving very large gifs may trigger a bug in imagemagick.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.sim!-Tuple{Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.sim!","text":"sim!(output, ruleset, init; tstop=1000)\n\nRuns the whole simulation, passing the destination aray to the passed in output for each time-step.\n\nArguments\n\noutput: An AbstractOutput to store frames or display them on the screen.\nruleset: A Rule() containing one ore more AbstractRule. These will each be run in sequence.\ninit: The initialisation array.\nargs: additional args are passed through to rule and neighbors methods.\n\nKeyword Arguments\n\ntstop: Any Number. Default: 100\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.addpadding-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T,N},Any}} where N where T","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.addpadding","text":"Find the maximum radius required by all rules Add padding around the original init array, offset into the negative So that the first real cell is still 1, 1\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.applyrule","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.applyrule","text":"applyrule(rule::AbstractRule, data, state, index)\n\nUpdates cell values based on their current state and the state of other cells as defined in the Rule.\n\nArguments:\n\nrule : AbstractRule\ndata : FrameData\nstate: the value of the current cell\nindex: a (row, column) tuple of Int for the current cell coordinates - t: the current time step\nargs: additional arguments passed through from user input to sim!\n\nReturns a value to be written to the current cell.\n\n\n\n\n\n","category":"function"},{"location":"#CellularAutomataBase.applyrule!","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.applyrule!","text":"applyrule!(rule::AbstractPartialRule, data, state, index)\n\nA rule that manually writes to the dest array, used in rules inheriting from AbstractPartialRule.\n\nArguments:\n\nsee applyrule\n\n\n\n\n\n","category":"function"},{"location":"#CellularAutomataBase.applyrule-Tuple{Life,Any,Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.applyrule","text":"rule(model::AbstractLife, state)\n\nRule for game-of-life style cellular automata. This is a demonstration of  Cellular Automata more than a seriously optimised game of life model.\n\nCells becomes active if it is empty and the number of neightbors is a number in the b array, and remains active the cell is active and the number of neightbors is in the s array.\n\nReturns: boolean\n\nExamples (gleaned from CellularAutomata.jl)\n\nUse the arrow keys to scroll around, or zoom out if your terminal can do that!\n\n# Life. \ninit = round.(Int64, max.(0.0, rand(-3.0:0.1:1.0, 300,300)))\noutput = REPLOutput{:block}(init; fps=10, color=:red)\nsim!(output, model, init; time=1000)\n\n# Dimoeba\ninit = rand(0:1, 400, 300)\ninit[:, 100:200] .= 0\noutput = REPLOutput{:braile}(init; fps=25, color=:blue)\nsim!(output, Ruleset(Life(b=(3,5,6,7,8), s=(5,6,7,8))), init; time=1000)\n\n# Replicator\ninit = fill(1, 300,300)\ninit[:, 100:200] .= 0\ninit[10, :] .= 0\noutput = REPLOutput{:block}(init; fps=60, color=:yellow)\nsim!(output, Ruleset(Life(b=(1,3,5,7), s=(1,3,5,7))), init; time=1000)\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.applyrule-Tuple{Tuple,Any,Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.applyrule","text":"applyrule(rules::Tuple, data, state, (i, j))\n\nSubrules. If a tuple of rules is passed to applyrule, run them sequentially for each cell. This can have much beter performance as no writes occur between rules, and they are essentially compiled together into compound rules. This gives correct results only for AbstractCellRule, or for a single AbstractNeighborhoodRule followed by AbstractCellRule.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.frametoimage","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.frametoimage","text":"Convert frame matrix to RGB24, using any AbstractFrameProcessor\n\n\n\n\n\n","category":"function"},{"location":"#CellularAutomataBase.handleoverflow!-Tuple{CellularAutomataBase.AbstractSimData,Integer}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.handleoverflow!","text":"Wrap overflow where required. This optimisation allows us to ignore bounds checks on neighborhoods and still use a wraparound grid.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.hoodsize-Tuple{Integer}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.hoodsize","text":"sizefromradius(radius)\n\nGet the size of a neighborhood dimension from its radius,  which is always 2r + 1.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.inbounds-Tuple{Tuple,Tuple,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.inbounds","text":"inbounds(x, max, overflow)\n\nCheck grid boundaries for a single coordinate and max value or a tuple of coorinates and max values.\n\nReturns a tuple containing the coordinate(s) followed by a boolean true if the cell is in bounds, false if not.\n\nOverflow of type RemoveOverflow returns the coordinate and false to skip coordinates that overflow outside of the grid. WrapOverflow returns a tuple with the current position or it's wrapped equivalent, and true as it is allways in-bounds.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.initframes!-Tuple{AbstractGraphicOutput,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.initframes!","text":"Frames are deleted and reallocated during the simulation, as performance is often display limited, and this allows runs of any length.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.initframes!-Tuple{AbstractOutput,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.initframes!","text":"Frames are preallocated and reused.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.initstatus!-Tuple{Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.initstatus!","text":"Initialise the block status array. This tracks whether anything has to be done in an area of the main array.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.maprule!-Tuple{CellularAutomataBase.AbstractSimData,AbstractRule}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.maprule!","text":"Apply the rule for each cell in the grid, using optimisations allowed for the supertype of the rule.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.maxradius-Tuple{Ruleset}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.maxradius","text":"Find the largest radius present in the passed in rules.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.neighbors","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.neighbors","text":"neighbors(hood::AbstractNeighborhood, state, indices, t, source, args...)\n\nChecks all cells in neighborhood and combines them according to the particular neighborhood type.\n\n\n\n\n\n","category":"function"},{"location":"#CellularAutomataBase.neighbors-Tuple{AbstractCustomNeighborhood,Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.neighbors","text":"neighbors(hood::AbstractCustomNeighborhood, buf, state)\n\nSum a single custom neighborhood.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.neighbors-Tuple{LayeredCustomNeighborhood,Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.neighbors","text":"neighbors(hood::LayeredCustomNeighborhood, buf, state) Sum multiple custom neighborhoods separately.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.neighbors-Tuple{RadialNeighborhood,Any,Any,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.neighbors","text":"neighbors(hood::RadialNeighborhood, buf, state)\n\nSums moore nieghborhoods of any dimension. \n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.radius","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.radius","text":"Return the radius of a rule if it has one, otherwise zero.\n\n\n\n\n\n","category":"function"},{"location":"#CellularAutomataBase.runsim!-Tuple{Any,Vararg{Any,N} where N}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.runsim!","text":"run the simulation either directly or asynchronously.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.sequencerules!-Tuple{Any,Ruleset}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.sequencerules!","text":"Iterate over all rules recursively, swapping source and dest arrays. Returns a tuple containing the source and dest arrays for the next iteration.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.showframe-Tuple{AbstractOutput,Vararg{Any,N} where N}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.showframe","text":"showframe(output::AbstractOutput, [t])\n\nShow the last frame of the output, or the frame at time t.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.simdata-Tuple{AbstractRuleset,AbstractArray}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.simdata","text":"Generate simulation data to match a ruleset and init array.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.simloop!-NTuple{4,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.simloop!","text":"Loop over the selected timespan, running the ruleset and displaying the output\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.swapsource-Tuple{Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.swapsource","text":"Swap source and dest arrays. Allways returns regular SimData.\n\n\n\n\n\n","category":"method"},{"location":"#CellularAutomataBase.updatetime-Tuple{CellularAutomataBase.SimData,Any}","page":"CellularAutomataBase.jl","title":"CellularAutomataBase.updatetime","text":"Uptate timestamp\n\n\n\n\n\n","category":"method"}]
}
